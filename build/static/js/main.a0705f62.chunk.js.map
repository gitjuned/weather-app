{"version":3,"sources":["ImageComponent.js","App.js","serviceWorker.js","index.js","assets/icons/location.svg","assets/icons/search.svg","assets/icons/sun.svg","assets/icons/rain.svg","assets/icons/cloudy.svg"],"names":["ImageComponent","type","src","CloudIcon","alt","RainIcon","SunIcon","App","props","getLocation","fetch","then","res","json","result","url","lat","lon","getData","handleSearch","value","target","console","log","setState","searchQuery","handleButtonClick","state","byCity","data","days","currentDay","chartData","labels","datasets","lineTension","fill","borderColor","pointBorderColor","pointBackgroundColor","borderDash","pointRadius","pointHoverRadius","pointHitRadius","pointBorderWidth","pointStyle","this","cityName","list","chartXAxesLabels","xTempArray","i","length","push","xTime","moment","dt_txt","format","xTemp","main","temp","error","alert","className","LocationIcon","placeholder","onChange","event","onClick","SearchIcon","map","item","key","dt","substring","temp_max","toString","temp_min","weather","description","options","layout","padding","title","display","legend","fontSize","ticks","scales","xAxes","fontColor","yAxes","pressure","humidity","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.a0705f62.chunk.js","sourcesContent":["import React from \"react\";\n\nimport SunIcon from \"./assets/icons/sun.svg\";\nimport RainIcon from \"./assets/icons/rain.svg\";\nimport CloudIcon from \"./assets/icons/cloudy.svg\";\n\nexport default function ImageComponent({ type }) {\n  if (type === \"Cloudy\") {\n    return <img src={CloudIcon} alt=\"cloud\" />;\n  } else if (type === \"Rains\") {\n    return <img src={RainIcon} alt=\"rain\" />;\n  } else {\n    return <img src={SunIcon} alt=\"sun\" />;\n  }\n}\n","import moment from \"moment\";\nimport React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./App.scss\";\nimport LocationIcon from \"./assets/icons/location.svg\";\nimport SearchIcon from \"./assets/icons/search.svg\";\nimport ImageComponent from \"./ImageComponent\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: \"\",\n      data: null,\n      days: null,\n      currentDay: null,\n      chartData: {\n        labels: [\n          \"Boston\",\n          \"Worcester\",\n          \"Springfield\",\n          \"Lowell\",\n          \"Cambridge\",\n          \"New Bedford\",\n        ],\n        datasets: [\n          {\n            data: [617594, 181045, 153060, 106519, 105162, 95072],\n\n            lineTension: 0.25,\n            fill: false,\n            borderColor: \"lightblue\",\n\n            pointBorderColor: \"lightblue\",\n            pointBackgroundColor: \"white\",\n            borderDash: [],\n            pointRadius: 5,\n            pointHoverRadius: 10,\n            pointHitRadius: 30,\n            pointBorderWidth: 2,\n            pointStyle: \"rectRounded\",\n          },\n        ],\n      },\n    };\n  }\n  componentDidMount() {\n    this.getLocation();\n  }\n  byCity(cityName) {\n    let url = `http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=e3b248023441205c44963ae49d6e8724&units=metric&mode=json`;\n    this.getData(url);\n  }\n\n  getLocation = () => {\n    fetch(\"http://ip-api.com/json\")\n      .then((res) => res.json())\n      .then((result) => {\n        let url = `http://api.openweathermap.org/data/2.5/forecast?lat=${result.lat}&lon=${result.lon}&appid=e3b248023441205c44963ae49d6e8724&units=metric&mode=json`;\n        this.getData(url);\n      });\n  };\n\n  getData(url) {\n    fetch(url)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          let list = [];\n          let chartXAxesLabels = [];\n          let xTempArray = [];\n\n          for (let i = 0; i < result.list.length; ) {\n            list.push(result.list[i]);\n            i = i + 8;\n          }\n          for (let i = 0; i <= 4; i++) {\n            let xTime = moment(result.list[i].dt_txt).format(\"hha\");\n            let xTemp = result.list[i].main.temp;\n\n            xTempArray.push(xTemp);\n            chartXAxesLabels.push(xTemp + \"Â° \" + xTime);\n          }\n          this.setState({\n            data: result,\n            days: [...list],\n            currentDay: result.list[0],\n            chartData: {\n              labels: [...chartXAxesLabels],\n              datasets: [\n                {\n                  data: [...xTempArray],\n                },\n              ],\n            },\n          });\n        },\n        (error) => {\n          alert(\"Some Error Occured! check console for error\");\n          console.log(error);\n        }\n      );\n  }\n\n  handleSearch = ({ target: { value } }) => {\n    console.log(\"handle search\");\n    this.setState({\n      searchQuery: value,\n    });\n  };\n  handleButtonClick = () => {\n    console.log(\"button clicked\", this.state.searchQuery);\n    this.byCity(this.state.searchQuery);\n  };\n\n  render() {\n    return (\n      <section>\n        {/* INPUT */}\n        <div className=\"input-wrapper box-with-shadow\">\n          <div className=\"left-block\">\n            <img src={LocationIcon} alt=\"location-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"City\"\n              value={this.state.searchQuery}\n              onChange={(event) => this.handleSearch(event)}\n            />\n          </div>\n          <button type=\"button\" onClick={this.handleButtonClick}>\n            <img src={SearchIcon} alt=\"search-icon\" />\n          </button>\n        </div>\n        {/* /INPUT */}\n\n        {/* DAYS */}\n        <div className=\"days\">\n          {this.state.days &&\n            this.state.days.map((item) => {\n              return (\n                <div className=\"day\" key={item.dt}>\n                  <h6>{moment(item.dt_txt.substring(0, 10)).format(\"ddd\")}</h6>\n                  <h5>\n                    {item.main.temp_max.toString().substring(0, 2)}&deg;\n                    <span>\n                      {item.main.temp_min.toString().substring(0, 2)}&deg;\n                    </span>\n                  </h5>\n                  <ImageComponent type={item.weather[0].description} />\n                  <p>{item.weather[0].main}</p>\n                </div>\n              );\n            })}\n        </div>\n        {/* /DAYS */}\n\n        {/* DAY INFO */}\n\n        {this.state.currentDay && this.state.chartData && (\n          <div className=\"day-info box-with-shadow br-6\">\n            <div className=\"title\">\n              <h1>\n                {this.state.currentDay.main.temp.toString().substring(0, 2)}\n                &#8451;\n              </h1>\n\n              <ImageComponent\n                type={this.state.currentDay.weather[0].description}\n              />\n            </div>\n\n            <Line\n              data={this.state.chartData}\n              options={{\n                layout: {\n                  padding: 10,\n                },\n\n                title: {\n                  display: false,\n                },\n                legend: {\n                  display: false,\n                  labels: {\n                    fontSize: 80,\n                  },\n                },\n                ticks: {\n                  display: false,\n                },\n\n                scales: {\n                  xAxes: [\n                    {\n                      ticks: {\n                        fontSize: 8,\n                        fontColor: \"black\",\n                      },\n                    },\n                  ],\n                  yAxes: [\n                    {\n                      display: false,\n                    },\n                  ],\n                },\n              }}\n            ></Line>\n            <div className=\"more-info\">\n              <span>\n                <h5>Pressure</h5>\n                <h6>{this.state.currentDay.main.pressure} hpa</h6>\n              </span>\n              <span>\n                <h5>Humidity</h5>\n                <h6>{this.state.currentDay.main.humidity} %</h6>\n              </span>\n            </div>\n\n            {/* SUNRISE AND SET  */}\n            <div className=\"more-info sun-rise-set\">\n              <span>\n                <h5>Sunrise</h5>\n                <h6>7.30am</h6>\n              </span>\n              <span>\n                <h5>Sunset</h5>\n                <h6>6.00pm</h6>\n              </span>\n            </div>\n          </div>\n          // SUNRISE AND SET END\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/location.f57e4161.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.c4127766.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.02f11d1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.18df2e48.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.849e970e.svg\";"],"sourceRoot":""}